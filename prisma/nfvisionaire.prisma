generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/nfvisionaire"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_NFVISIONAIRE_WITH_SCHEMA")
}

model admin {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(32)
  name        String    @db.VarChar(32)
  password    String    @db.VarChar(86)
  salt        String    @db.VarChar(32)
  role        String    @db.VarChar(10)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  modified_at DateTime? @default(now()) @db.Timestamp(6)
}

model event {
  id              Int       @id @default(autoincrement())
  type            String
  stream_id       String
  detection       Json
  primary_image   Bytes?
  secondary_image Bytes?
  result          Json?
  status          String?
  event_time      DateTime? @default(now())
  created_at      DateTime? @default(now())
}

model enrolled_face {
  id          Int       @id @default(autoincrement())
  face_id     BigInt    @db.BigInt
  name        String?
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  status      String?
  gender      String?
  birth_place String?
  birth_date  DateTime?
}

model vehicle {
  id           BigInt    @id @default(autoincrement())
  plate_number String    @db.VarChar(100)
  unique_id    String    @unique @db.VarChar(100)
  type         String?   @db.VarChar(100)
  brand        String?   @db.VarChar(100)
  color        String?   @db.VarChar(100)
  name         String?   @db.VarChar(200)
  status       String?   @db.VarChar(100)
  deleted_at   DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@index([id], map: "vehicle_auto_index_id")
  @@index([name], map: "vehicle_index_name")
  @@index([plate_number], map: "vehicle_index_plate_number")
  @@index([status], map: "vehicle_index_status")
  @@index([type], map: "vehicle_index_type")
  @@index([unique_id], map: "vehicle_index_unique_id")
}
