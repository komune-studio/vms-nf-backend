generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/nfvisionaire"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_NFVISIONAIRE_WITH_SCHEMA")
}

model admin {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(32)
  name        String    @db.VarChar(32)
  password    String    @db.VarChar(86)
  salt        String    @db.VarChar(32)
  role        String    @db.VarChar(10)
  site_access BigInt[]
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  modified_at DateTime? @default(now()) @db.Timestamp(6)
  active      Boolean   @default(true)
}

model event {
  id              Int       @id @default(autoincrement())
  type            String
  stream_id       String
  detection       Json
  primary_image   Bytes?
  secondary_image Bytes?
  result          Json?
  status          String?
  event_time      DateTime? @default(now())
  created_at      DateTime? @default(now())
}

model enrolled_face {
  id              Int       @id @default(autoincrement())
  face_id         BigInt    @db.BigInt
  name            String?   @db.VarChar(200)
  deleted_at      DateTime? @db.Timestamptz(6)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  identity_number String?   @db.VarChar(200)
  status          String?   @db.VarChar(200)
  gender          String?   @db.VarChar(200)
  birth_place     String?   @db.VarChar(200)
  birth_date      DateTime? @db.Date
  detection   detection[]
  additional_info Json
}

model vehicle {
  id           BigInt    @id @default(autoincrement())
  plate_number String    @db.VarChar(100)
  unique_id    String    @unique @db.VarChar(100)
  type         String?   @db.VarChar(100)
  brand        String?   @db.VarChar(100)
  color        String?   @db.VarChar(100)
  name         String?   @db.VarChar(200)
  status       String?   @db.VarChar(100)
  deleted_at   DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  vehicle_detection   vehicle_detection[]
  additional_info Json

  @@index([id], map: "vehicle_auto_index_id")
  @@index([name], map: "vehicle_index_name")
  @@index([plate_number], map: "vehicle_index_plate_number")
  @@index([status], map: "vehicle_index_status")
  @@index([type], map: "vehicle_index_type")
  @@index([unique_id], map: "vehicle_index_unique_id")
}

model site {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(200)
  deleted_at DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
}

model map_site_stream {
  id         Int      @id @default(autoincrement())
  site_id    BigInt   @db.BigInt
  stream_id  String   @db.VarChar(200)
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model face_image {
  id               BigInt    @id @default(autoincrement())
  enrolled_face_id Int
  variation        String    @db.VarChar
  image            Bytes
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  image_thumbnail  Bytes?
}

model cases {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar
  deleted_at DateTime? @db.Timestamptz(6)
}

model users {
  id          Int       @id @default(autoincrement())
  photo       Bytes?
  email        String    @db.VarChar(255)
  name        String    @db.VarChar(32)
  password    String    @db.VarChar(86)
  salt        String    @db.VarChar(32)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  modified_at DateTime? @default(now()) @db.Timestamp(6)
  active      Boolean   @default(true)
  detection   detection[]
  vehicle_detection   vehicle_detection[]
}

model detection {
    id            Int     @id @default(autoincrement())
    enrollment_id Int
    latitude    Float?      @default(0)
    longitude   Float?      @default(0)
    address     String?    @db.VarChar
    report      String?    @db.VarChar
    image       Bytes
    user_id     Int?
    emotion     String?
    associate_id Int?
    emotion_count   Json?
    emotion_analysis   Json?
    stream_name   String?
    created_at       DateTime  @default(now()) @db.Timestamptz(6)
    enrolled_face    enrolled_face @relation(fields: [enrollment_id], references: [id])
    user    users? @relation(fields: [user_id], references: [id])
}

model vehicle_detection {
    id            Int     @id @default(autoincrement())
    vehicle_id    BigInt
    latitude    Float?      @default(0)
    longitude   Float?      @default(0)
    address     String?    @db.VarChar
    report      String?    @db.VarChar
    image       Bytes
    user_id     Int?
    stream_name String?
    created_at       DateTime  @default(now()) @db.Timestamptz(6)
    vehicle    vehicle @relation(fields: [vehicle_id], references: [id])
    user    users? @relation(fields: [user_id], references: [id])
}

model custom_logo {
    id            Int     @id @default(autoincrement())
    image         Bytes
    height        Int
}
